version: '3.8'

services:
  # MySQL Database
  db:
    image: mysql:8.0
    container_name: lab_web_db
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_DATABASE: ${MYSQL_DATABASE}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
      MYSQL_CHARACTER_SET_SERVER: utf8mb4
      MYSQL_COLLATION_SERVER: utf8mb4_unicode_ci
    ports:
      - "${MYSQL_PORT:-3307}:3306"
    volumes:
      - mysql_data:/var/lib/mysql
      - ./backend/scripts/development/init_data.sql:/docker-entrypoint-initdb.d/init_data.sql:ro
    command: --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci
    networks:
      - lab_web_network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-p${MYSQL_ROOT_PASSWORD}"]
      timeout: 20s
      retries: 10
    restart: unless-stopped

  # Backend Flask Application
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    image: lab-website-backend:latest
    container_name: lab_web_backend
    environment:
      # Database Configuration
      DATABASE_URL: mysql+pymysql://root:${MYSQL_ROOT_PASSWORD}@db:3306/${MYSQL_DATABASE}?charset=utf8mb4
      MYSQL_HOST: db
      MYSQL_PORT: 3306
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_DATABASE: ${MYSQL_DATABASE}
      
      # Flask Configuration
      FLASK_APP: run.py
      FLASK_CONFIG: ${FLASK_CONFIG:-production}
      SECRET_KEY: ${SECRET_KEY}
      JWT_SECRET_KEY: ${JWT_SECRET_KEY}
      
      # Application Configuration
      UPLOAD_FOLDER: ${UPLOAD_FOLDER:-/app/media}
      CORS_ORIGINS: ${CORS_ORIGINS}
    ports:
      - "${BACKEND_PORT:-8000}:8000"
    volumes:
      - media_data:/app/media
      - ./logs:/app/logs
    depends_on:
      db:
        condition: service_healthy
    networks:
      - lab_web_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: unless-stopped

  # Frontend Vue.js Application
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    image: lab-website-frontend:latest
    container_name: lab_web_frontend
    ports:
      - "${FRONTEND_PORT:-3000}:80"
    environment:
      - NODE_ENV=${NODE_ENV:-production}
    volumes:
      - ./frontend/docker/nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - backend
    networks:
      - lab_web_network
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    restart: unless-stopped

  # Optional: phpMyAdmin Database Management
  phpmyadmin:
    image: phpmyadmin/phpmyadmin:latest
    container_name: lab_web_phpmyadmin
    environment:
      PMA_HOST: db
      PMA_PORT: 3306
      PMA_USER: root
      PMA_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
    ports:
      - "${PHPMYADMIN_PORT:-8081}:80"
    depends_on:
      - db
    networks:
      - lab_web_network
    restart: unless-stopped

volumes:
  mysql_data:
    driver: local
  media_data:
    driver: local

networks:
  lab_web_network:
    driver: bridge
    name: lab_web_default